generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  role      Role
  profile   Profile?
  courses   Course[]        @relation("InstructorCourses") // courses taught
  enrollments Enrollment[]
  messagesSent Message[]    @relation("SentMessages")
  messagesReceived Message[] @relation("ReceivedMessages")
  notifications Notification[]
  payments   Payment[]
  certificates Certificate[]
  submisiion Submission[]
  createdAt DateTime @default(now())
}

model Profile {
  id      Int    @id @default(autoincrement())
  userId  Int    @unique
  user    User   @relation(fields: [userId], references: [id])
  name    String
  photo   String?
  bio     String?
}

model Course {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  category    String
  difficulty  String
  price       Float      @default(0.0)
  instructor  User       @relation("InstructorCourses", fields: [instructorId], references: [id])
  instructorId Int
  contents    Content[]
  enrollments Enrollment[]
  forums      Forum[]
  payment Payment[]
  certificate Certificate[]
  createdAt   DateTime @default(now())
}

model Content {
  id        Int      @id @default(autoincrement())
  type      ContentType
  title     String
  url       String?
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  Int
  quiz      Quiz?
  assignment Assignment?
}

model Quiz {
  id        Int      @id @default(autoincrement())
  contentId Int      @unique
  content   Content  @relation(fields: [contentId], references: [id])
  questions Json
}

model Assignment {
  id        Int       @id @default(autoincrement())
  contentId Int       @unique
  content   Content   @relation(fields: [contentId], references: [id])
  instructions String
  submissions Submission[]
}

model Submission {
  id          Int        @id @default(autoincrement())
  assignment  Assignment @relation(fields: [assignmentId], references: [id])
  assignmentId Int
  student     User       @relation(fields: [studentId], references: [id])
  studentId   Int
  fileUrl     String?
  grade       Float?
  submittedAt DateTime @default(now())
}

model Enrollment {
  id         Int     @id @default(autoincrement())
  student    User    @relation(fields: [studentId], references: [id])
  studentId  Int
  course     Course  @relation(fields: [courseId], references: [id])
  courseId   Int
  progress   Float   @default(0.0)
  createdAt  DateTime @default(now())
}

model Payment {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  course    Course  @relation(fields: [courseId], references: [id])
  courseId  Int
  amount    Float
  status    PaymentStatus
  createdAt DateTime @default(now())
}

model Forum {
  id        Int     @id @default(autoincrement())
  course    Course  @relation(fields: [courseId], references: [id])
  courseId  Int
  messages  Message[]
}

model Message {
  id        Int     @id @default(autoincrement())
  content   String
  sender    User    @relation("SentMessages", fields: [senderId], references: [id])
  senderId  Int
  receiver  User?   @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId Int?
  forum     Forum?  @relation(fields: [forumId], references: [id])
  forumId   Int?
  createdAt DateTime @default(now())
}

model Notification {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Certificate {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  course    Course  @relation(fields: [courseId], references: [id])
  courseId  Int
  issuedAt  DateTime @default(now())
}

enum Role {
  STUDENT
  INSTRUCTOR
  ADMIN
}

enum ContentType {
  VIDEO
  PDF
  QUIZ
  ASSIGNMENT
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}
